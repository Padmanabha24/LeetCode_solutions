//Question
Given an array of integers nums sorted in non-decreasing order, find the starting and ending position of a given target value.

If target is not found in the array, return [-1, -1].

You must write an algorithm with O(log n) runtime complexity.

 

Example 1:

Input: nums = [5,7,7,8,8,10], target = 8
Output: [3,4]
Example 2:

Input: nums = [5,7,7,8,8,10], target = 6
Output: [-1,-1]
Example 3:

Input: nums = [], target = 0
Output: [-1,-1]

//solution
class Solution {

    //for first index
    public int firstIndex(int[] nums,int target){
     int fi=-1;
     int l=0;
     int r=nums.length-1;

       while(l<=r){
                int m=(l+r)/2;
                if (nums[m]==target){
                    fi=m;
                    r=m-1;
                }
                else if(nums[m]>target){
                    r=m-1;
                }
                else{
                    l=m+1;
                }
         }
         return fi;
    }

    //for second index
     public int secondIndex(int[] nums,int target){
     int si=-1;
     int l=0;
     int r=nums.length-1;

       while(l<=r){
                int m=(l+r)/2;
                if (nums[m]==target){
                    si=m;
                   l = m + 1;
                }
                else if(nums[m]>target){
                    r=m-1;
                }
                else{
                    l=m+1;
                }
         }
         return si;
    }
    public int[] searchRange(int[] nums, int target) {
        return new int[]{firstIndex(nums,target), secondIndex(nums,target)};
       
    }

}


